{"version":3,"sources":["../src/features/Middleware/errors.ts","../src/secret.ts","../src/features/Exception/root.ts","../src/features/Exception/unauthorized.ts","../src/features/Middleware/authMiddleware.ts","../src/features/auth/login-authentication/controller.ts","../src/features/auth/login-authentication/routes.ts","../src/features/Exception/bad-request.ts","../src/error-handler.ts","../src/features/Exception/notfound-exception.ts","../src/features/Schema/SignUpSchema.ts","../src/features/auth/login/controller.ts","../src/features/auth/login/routes.ts","../src/features/auth/signup/controller.ts","../src/features/auth/signup/routes.ts","../src/features/Middleware/adminMiddleware.ts","../src/features/products/CreateProduct/controller.ts","../src/features/products/CreateProduct/router.ts","../src/features/products/DeleteProduct/controller.ts","../src/features/products/DeleteProduct/router.ts","../src/features/products/GetProductById/controller.ts","../src/features/products/GetProductById/router.ts","../src/features/products/ListProduct/controller.ts","../src/features/products/ListProduct/router.ts","../src/features/products/UpdateProduct/controller.ts","../src/features/products/UpdateProduct/router.ts","../src/features/routes.ts","../src/index.ts"],"names":["dotnet","jwt","prisma","PrismaClient","Router","ZodError","z","compareSync","jwt2","routes_default","hashSync","router_default","express","axios"],"mappings":"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","file":"index.js","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { HttpException } from \"../Exception/root\";\r\n\r\nexport const errormiddleware = (\r\n  error: HttpException,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const status = error.status || 500;\r\n  const message = error.message || \"Internal Server Error\";\r\n  res.status(error.status).json({\r\n    message: error.message,\r\n    errorCode: error.errorCode || \"UNKNOWN_ERROR\",\r\n    errors: error.errors || null,\r\n  });\r\n};\r\n","import dotnet from \"dotenv\";\r\n\r\ndotnet.config({ path: \".env\" });\r\n\r\nexport const Port = process.env.PORT;\r\nexport const JWT_SECRET = process.env.JWT_SECRET!;\r\n","//message , status code,Error codes , error\r\n\r\nexport class HttpException extends Error {\r\n  status: number;\r\n  message: string;\r\n  errorCode: ErrorCodes;\r\n  errors: any;\r\n  constructor(\r\n    status: number,\r\n    message: string,\r\n    errorCode: ErrorCodes,\r\n    errors: any\r\n  ) {\r\n    super(message);\r\n    this.status = status;\r\n    this.message = message;\r\n    this.errorCode = errorCode;\r\n    this.errors = errors;\r\n  }\r\n}\r\nexport enum ErrorCodes {\r\n  USER_NOT_FOUND = 1001,\r\n  USER_ALREADY_EXISTS = 1002,\r\n  INVALID_PASSWORD = 1003,\r\n  UNPROCESSABLE_ENTITY = 1004,\r\n  BAD_REQUEST = 3001,\r\n  INTERNAL_SERVER_ERROR = 5001,\r\n  TOKEN_NOT_FOUND = 4001,\r\n}\r\n","import { HttpException } from \"./root\";\r\n\r\nexport class UnauthorizedException extends HttpException {\r\n  constructor(message: string, errorCode: number, errors?: any) {\r\n    super(401, message, errorCode, errors);\r\n  }\r\n}\r\n","import { JWT_SECRET } from \"@/secret\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport { ErrorCodes } from \"../Exception/root\";\r\nimport { UnauthorizedException } from \"../Exception/unauthorized\";\r\nexport const AuthMiddleware = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  //1. Extract the token from the request header\r\n  //2. If token is not present throw an error\r\n  //3. if token is present, verify the token and extract the payload\r\n  //4. to get user from payload\r\n  //5. to attach the user to current request object\r\n\r\n  const token = req.headers.authorization;\r\n  if (!token) {\r\n    //** we write next here cuz we are not going too wrap AuthMiddleware with Error handler  */\r\n    next(\r\n      new UnauthorizedException(\"Token not found\", ErrorCodes.TOKEN_NOT_FOUND)\r\n    );\r\n  }\r\n  try {\r\n    const payload = jwt.verify(token as string, JWT_SECRET) as any;\r\n\r\n    const prisma = new PrismaClient();\r\n    const user = await prisma.user.findFirst({\r\n      where: { id: payload.userId },\r\n    });\r\n\r\n    if (!user) {\r\n      next(\r\n        new UnauthorizedException(\"Invalid Token\", ErrorCodes.TOKEN_NOT_FOUND)\r\n      );\r\n    }\r\n\r\n    req.user = user; // attach user to request object\r\n\r\n    next(); // we pass the control to next middleware\r\n  } catch (err) {\r\n    next(\r\n      new UnauthorizedException(\"Invalid Token\", ErrorCodes.TOKEN_NOT_FOUND)\r\n    );\r\n  }\r\n};\r\n","import { Request, Response } from \"express\";\r\n\r\nexport const loginAuthentication = async (req: Request, res: Response) => {\r\n  res.json(req.user);\r\n};\r\n","import { AuthMiddleware } from \"@/features/Middleware/authMiddleware\";\r\nimport { Router } from \"express\";\r\nimport { loginAuthentication } from \"./controller\";\r\n\r\nconst loginAuth = Router();\r\nloginAuth.get(\"/me\", [AuthMiddleware], loginAuthentication);\r\nexport default loginAuth;\r\n","import { ErrorCodes, HttpException } from \"./root\";\r\n\r\nexport class BadRequest extends HttpException {\r\n  constructor(message: string, errorCode: ErrorCodes) {\r\n    super(400, message, errorCode, null);\r\n  }\r\n}\r\n","// Generic error handling code\r\n\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport { ZodError } from \"zod\";\r\nimport { BadRequest } from \"./features/Exception/bad-request\";\r\nimport { ErrorCodes, HttpException } from \"./features/Exception/root\";\r\n\r\nexport const ErrorHandler = (method: Function) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await method(req, res, next);\r\n    } catch (err: any) {\r\n      let exception = <any>HttpException;\r\n      if (err instanceof HttpException) {\r\n        exception = err;\r\n      } else if (err instanceof ZodError) {\r\n        exception = new BadRequest(\r\n          \"Unprocessed Entity , missing or Json error\",\r\n          ErrorCodes.UNPROCESSABLE_ENTITY\r\n        );\r\n      } else {\r\n        exception = new HttpException(\r\n          500,\r\n          \"Internal server error\",\r\n          ErrorCodes.INTERNAL_SERVER_ERROR,\r\n          err?.issues\r\n        );\r\n      }\r\n      next(exception);\r\n    }\r\n  };\r\n};\r\n","import { ErrorCodes, HttpException } from \"./root\";\r\n\r\nexport class NotFoundException extends HttpException {\r\n  constructor(message: string, errorCode: ErrorCodes) {\r\n    super(404, message, errorCode, null);\r\n  }\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const SignUpSchema = z.object({\r\n  name: z.string().min(3).max(16),\r\n  email: z.string().email(\"Invalid email\"),\r\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\r\n});\r\n","import { BadRequest } from \"@/features/Exception/bad-request\";\r\nimport { NotFoundException } from \"@/features/Exception/notfound-exception\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { SignUpSchema } from \"@/features/Schema/SignUpSchema\";\r\nimport { prisma } from \"@/index\";\r\nimport { JWT_SECRET } from \"@/secret\";\r\nimport { compareSync } from \"bcrypt\";\r\nimport { Request, Response } from \"express\";\r\nimport * as jwt from \"jsonwebtoken\";\r\n\r\nexport const loginController = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<any> => {\r\n  SignUpSchema.parse(req.body);\r\n  const { email, password, name } = req.body;\r\n\r\n  if (!email || !password) {\r\n    throw new BadRequest(\r\n      \"Email and password are required\",\r\n      ErrorCodes.BAD_REQUEST\r\n    ); //throw vanekaii generic error throw gareko\r\n  }\r\n  const user = await prisma.user.findFirst({\r\n    where: { email },\r\n  });\r\n\r\n  if (!user) {\r\n    throw new NotFoundException(\"User not found\", ErrorCodes.USER_NOT_FOUND);\r\n  }\r\n\r\n  const isPasswordValid = compareSync(password, user!.password);\r\n\r\n  if (!isPasswordValid) {\r\n    throw new BadRequest(\"Invalid password\", ErrorCodes.INVALID_PASSWORD);\r\n  }\r\n\r\n  const token = jwt.sign({ userId: user!.id }, JWT_SECRET, {\r\n    expiresIn: \"1h\",\r\n  });\r\n\r\n  res.status(200).json({\r\n    message: \"Login successful\",\r\n    user: {\r\n      id: user!.id,\r\n      email: user!.email,\r\n      name: user!.name,\r\n      role: user!.role,\r\n    },\r\n    token,\r\n  });\r\n  //  catch (err: any) {\r\n  //   if (err.name === \"ZodError\") {\r\n  //     return next(\r\n  //       new UnProcessableEntity(\r\n  //         422,\r\n  //         \"Validation failed\",\r\n  //         ErrorCodes.UNPROCESSABLE_ENTITY,\r\n  //         err.errors\r\n  //       )\r\n  //     );\r\n  //   }\r\n  //   console.log(err);\r\n  //   return res.send(\r\n  //     new UnProcessableEntity(\r\n  //       422,\r\n  //       \"Internal server error\",\r\n  //       ErrorCodes.UNPROCESSABLE_ENTITY,\r\n  //       err?.issues\r\n  //     )\r\n  //   );\r\n  // }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { Router } from \"express\";\r\nimport { loginController } from \"./controller\";\r\n\r\nconst loginRouter = Router();\r\n\r\nloginRouter.post(\"/login\", ErrorHandler(loginController));\r\n\r\nexport default loginRouter;\r\n","import { BadRequest } from \"@/features/Exception/bad-request\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { SignUpSchema } from \"@/features/Schema/SignUpSchema\";\r\nimport { prisma } from \"@/index\";\r\nimport { hashSync } from \"bcrypt\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const Signup = async (req: Request, res: Response): Promise<any> => {\r\n  SignUpSchema.parse(req.body);\r\n  const { email, password, name } = req.body;\r\n  const user = await prisma.user.findFirst({\r\n    where: { email: email },\r\n  });\r\n  if (user) {\r\n    throw new BadRequest(\"User already exists\", ErrorCodes.USER_ALREADY_EXISTS);\r\n  }\r\n  const Userdata = await prisma.user.create({\r\n    data: {\r\n      email,\r\n      password: hashSync(password, 10),\r\n      name,\r\n    },\r\n  });\r\n  // console.log(\"user created\", Userdata);\r\n  return res.send(Userdata);\r\n  //  catch (err: any) {\r\n  //   if (err.name === \"ZodError\") {\r\n  //     // Handle Zod validation error\r\n  //     return next(\r\n  //       new UnProcessableEntity(\r\n  //         422,\r\n  //         \"Validation failed\",\r\n  //         ErrorCodes.UNPROCESSABLE_ENTITY,\r\n  //         err.errors // Zod's error details\r\n  //       )\r\n  //     );\r\n  //   }\r\n\r\n  //   // Handle other errors\r\n  //   return next(\r\n  //     new UnProcessableEntity(\r\n  //       500,\r\n  //       \"Internal server error\",\r\n  //       ErrorCodes.INTERNAL_SERVER_ERROR,\r\n  //       err?.issues\r\n  //     )\r\n  //   );\r\n  // }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { Router } from \"express\";\r\nimport { Signup } from \"./controller\";\r\n\r\nconst signupRouter = Router();\r\n\r\nsignupRouter.post(\"/signup\", ErrorHandler(Signup));\r\n\r\nexport default signupRouter;\r\n","import { NextFunction, Request, Response } from \"express\";\r\nimport { ErrorCodes } from \"../Exception/root\";\r\nimport { UnauthorizedException } from \"../Exception/unauthorized\";\r\n\r\nexport const AdminMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  const user = req.user;\r\n  if (user.role === \"ADMIN\") {\r\n    next();\r\n  } else {\r\n    next(new UnauthorizedException(\"UNAUTHORIZED\", ErrorCodes.TOKEN_NOT_FOUND));\r\n  }\r\n};\r\n","import { prisma } from \"@/index\";\r\n\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const getProducts = async (req: Request, res: Response) => {\r\n  const { name, description, price } = req.body;\r\n\r\n  const createProducts = await prisma.product.create({\r\n    data: {\r\n      ...req.body,\r\n      tags: req.body.tags.join(\",\"),\r\n    },\r\n  });\r\n  res.status(200).json({\r\n    message: \"Login successful\",\r\n    user: req.user.name,\r\n    product: {\r\n      id: createProducts.id,\r\n      name: createProducts.name,\r\n      description: createProducts.description,\r\n      price: createProducts.price,\r\n      tags: createProducts.tags,\r\n    },\r\n  });\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { Router } from \"express\";\r\nimport { AdminMiddleware } from \"../../Middleware/adminMiddleware\";\r\nimport { AuthMiddleware } from \"../../Middleware/authMiddleware\";\r\nimport { getProducts } from \"./controller\";\r\n\r\nconst CreateProductRouter = Router();\r\nCreateProductRouter.post(\r\n  \"/createproduct\",\r\n  [AuthMiddleware, AdminMiddleware],\r\n  ErrorHandler(getProducts)\r\n);\r\nexport default CreateProductRouter;\r\n","import { NotFoundException } from \"@/features/Exception/notfound-exception\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { prisma } from \"@/index\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const DeleteProduct = async (req: Request, res: Response) => {\r\n  //   const { name, description, price, tags } = req.body;\r\n  try {\r\n    const product = req.body;\r\n    const deleteProduct = await prisma.product.delete({\r\n      where: { id: +req.params.id }, //+ means number type\r\n    });\r\n    res.json({\r\n      ...deleteProduct,\r\n      message: \"Product deleted sucessfully\",\r\n    });\r\n  } catch (err) {\r\n    throw new NotFoundException(\"Product not found\", ErrorCodes.USER_NOT_FOUND);\r\n  }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { AdminMiddleware } from \"@/features/Middleware/adminMiddleware\";\r\nimport { AuthMiddleware } from \"@/features/Middleware/authMiddleware\";\r\nimport { Router } from \"express\";\r\nimport { DeleteProduct } from \"./controller\";\r\n\r\nconst DeleteProductRouter = Router();\r\n\r\nDeleteProductRouter.delete(\r\n  \"/:id\",\r\n  [AuthMiddleware, AdminMiddleware],\r\n  ErrorHandler(DeleteProduct)\r\n);\r\nexport default DeleteProductRouter;\r\n","import { NotFoundException } from \"@/features/Exception/notfound-exception\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const GetProductById = async (req: Request, res: Response) => {\r\n  try {\r\n    const product = req.body;\r\n    const prisma = new PrismaClient();\r\n    const getproduct = await prisma.product.findFirst({\r\n      where: { id: Number(req.params.id) },\r\n    });\r\n    res.json({\r\n      ...product,\r\n      getproduct,\r\n    });\r\n  } catch (err) {\r\n    throw new NotFoundException(\r\n      \"Some error while finding list By Id\",\r\n      ErrorCodes.USER_NOT_FOUND\r\n    );\r\n  }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { AdminMiddleware } from \"@/features/Middleware/adminMiddleware\";\r\nimport { AuthMiddleware } from \"@/features/Middleware/authMiddleware\";\r\nimport { Router } from \"express\";\r\nimport { GetProductById } from \"./controller\";\r\n\r\nconst GetProductByIdRouter = Router();\r\n\r\nGetProductByIdRouter.get(\r\n  \"/:id\",\r\n  [AuthMiddleware, AdminMiddleware],\r\n  ErrorHandler(GetProductById)\r\n);\r\nexport default GetProductByIdRouter;\r\n","import { NotFoundException } from \"@/features/Exception/notfound-exception\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const ListProduct = async (req: Request, res: Response) => {\r\n  // For list product we need the concept of pagination\r\n  // {\r\n  //     count:100,\r\n  //     data:[]\r\n  // }\r\n  try {\r\n    const prisma = new PrismaClient();\r\n    const count = await prisma.product.count();\r\n    const products = await prisma.product.findMany({\r\n      skip: +req.params.skip || 0,\r\n      take: 5,\r\n    });\r\n    res.json({\r\n      count,\r\n      data: products,\r\n    });\r\n  } catch (err) {\r\n    throw new NotFoundException(\r\n      \"Some error while finding list\",\r\n      ErrorCodes.USER_NOT_FOUND\r\n    );\r\n  }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { AdminMiddleware } from \"@/features/Middleware/adminMiddleware\";\r\nimport { AuthMiddleware } from \"@/features/Middleware/authMiddleware\";\r\nimport { Router } from \"express\";\r\nimport { ListProduct } from \"./controller\";\r\n\r\nconst ListProductRouter = Router();\r\nListProductRouter.get(\r\n  \"/\",\r\n  [AuthMiddleware, AdminMiddleware],\r\n  ErrorHandler(ListProduct)\r\n);\r\n\r\nexport default ListProductRouter;\r\n","import { NotFoundException } from \"@/features/Exception/notfound-exception\";\r\nimport { ErrorCodes } from \"@/features/Exception/root\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const UpdateProduct = async (req: Request, res: Response) => {\r\n  try {\r\n    const product = req.body;\r\n    if (product.tags) {\r\n      product.tags = product.tags.join(\",\");\r\n    }\r\n    const prisma = new PrismaClient();\r\n    const updateproduct = await prisma.product.update({\r\n      where: { id: Number(req.params.id) },\r\n      data: product,\r\n    });\r\n    res.json(updateproduct);\r\n  } catch (error) {\r\n    throw new NotFoundException(\"Product not found\", ErrorCodes.USER_NOT_FOUND);\r\n  }\r\n};\r\n","import { ErrorHandler } from \"@/error-handler\";\r\nimport { AdminMiddleware } from \"@/features/Middleware/adminMiddleware\";\r\nimport { AuthMiddleware } from \"@/features/Middleware/authMiddleware\";\r\nimport { Router } from \"express\";\r\nimport { UpdateProduct } from \"./controller\";\r\n\r\nconst UpdateProductRouter = Router();\r\n\r\nUpdateProductRouter.put(\r\n  \"/:id\",\r\n  [AuthMiddleware, AdminMiddleware],\r\n  ErrorHandler(UpdateProduct)\r\n);\r\nexport default UpdateProductRouter;\r\n","import { Router } from \"express\";\r\nimport loginAuth from \"./auth/login-authentication/routes\";\r\nimport loginRouter from \"./auth/login/routes\";\r\nimport signupRouter from \"./auth/signup/routes\";\r\nimport CreateProductRouter from \"./products/CreateProduct/router\";\r\nimport DeleteProductRouter from \"./products/DeleteProduct/router\";\r\nimport GetProductByIdRouter from \"./products/GetProductById/router\";\r\nimport ListProductRouter from \"./products/ListProduct/router\";\r\nimport UpdateProductRouter from \"./products/UpdateProduct/router\";\r\n\r\nconst mainRouter = Router();\r\n\r\nmainRouter.use(\"/auth\", loginRouter);\r\nmainRouter.use(\"/auth\", signupRouter);\r\nmainRouter.use(\"/auth\", loginAuth);\r\nmainRouter.use(\"/products\", CreateProductRouter);\r\nmainRouter.use(\"/products\", DeleteProductRouter);\r\nmainRouter.use(\"/products\", GetProductByIdRouter);\r\nmainRouter.use(\"/products\", ListProductRouter);\r\nmainRouter.use(\"/products\", UpdateProductRouter);\r\n\r\nexport default mainRouter;\r\n","import { PrismaClient } from \"@prisma/client\";\r\nimport axios from \"axios\";\r\nimport express from \"express\";\r\nimport { errormiddleware } from \"./features/Middleware/errors\";\r\nimport mainRouter from \"./features/routes\";\r\nimport { Port } from \"./secret\";\r\n\r\nconst app = express();\r\nconst cors = require(\"cors\");\r\n\r\napp.use(cors());\r\n\r\napp.use(axios);\r\n\r\napp.use(express.json());\r\n\r\nexport const prisma = new PrismaClient();\r\n\r\napp.use(\"/api\", mainRouter);\r\n\r\napp.use(errormiddleware);\r\n\r\napp.listen(Port, () => {\r\n  console.log(`Server is running on port ${Port}`);\r\n\r\n  console.log(\"CTR + C to exit\");\r\n});\r\n"]}